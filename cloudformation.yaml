AWSTemplateFormatVersion: '2010-09-09'
Description: 'YouTube Karaoke Queue System Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
    Description: Environment name (development or production)
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages

Resources:
  # DynamoDB Tables
  KaraokeSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub KaraokeSessions-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH

  KaraokeConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub KaraokeConnections-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: SessionIdIndex
          KeySchema:
            - AttributeName: sessionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt KaraokeSessionsTable.Arn
                  - !GetAtt KaraokeConnectionsTable.Arn
                  - !Sub ${KaraokeConnectionsTable.Arn}/index/*
        - PolicyName: WebSocketManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:yt-karaoke-${Environment}-*

  # Lambda Functions
  GetVideoDetailsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub yt-karaoke-get-video-details-${Environment}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub ${Environment}/getVideoDetails.zip
      Environment:
        Variables:
          YOUTUBE_API_KEY: !Sub '{{resolve:secretsmanager:yt-karaoke-${Environment}:SecretString:YouTubeApiKey}}'
      Timeout: 10
      MemorySize: 128

  WebSocketFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub yt-karaoke-websocket-${Environment}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub ${Environment}/websocket.zip
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref KaraokeConnectionsTable
          SESSIONS_TABLE: !Ref KaraokeSessionsTable
      Timeout: 10
      MemorySize: 128

  # API Gateway REST API
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub yt-karaoke-api-${Environment}
      Description: YouTube Karaoke Queue System API

  VideoDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: video-details

  VideoDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref VideoDetailsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVideoDetailsFunction.Arn}/invocations

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: VideoDetailsMethod
    Properties:
      RestApiId: !Ref RestApi

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref Environment

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub yt-karaoke-websocket-${Environment}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${WebSocketIntegration}

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${WebSocketIntegration}

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      OperationName: MessageRoute
      Target: !Sub integrations/${WebSocketIntegration}

  WebSocketIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: WebSocket Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketFunction.Arn}/invocations

Outputs:
  RestApiUrl:
    Description: REST API URL
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  WebSocketApiUrl:
    Description: WebSocket API URL
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  KaraokeSessionsTableName:
    Description: DynamoDB Sessions Table Name
    Value: !Ref KaraokeSessionsTable

  KaraokeConnectionsTableName:
    Description: DynamoDB Connections Table Name
    Value: !Ref KaraokeConnectionsTable